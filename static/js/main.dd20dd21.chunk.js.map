{"version":3,"sources":["components/DragADrop.js","App.js","serviceWorker.js","index.js"],"names":["DragADrop","data","useState","list","setList","dragging","setDragging","dragItem","useRef","dragNode","handleDragEnter","event","params","console","log","currentItem","current","target","oldList","newList","JSON","parse","stringify","groupIndex","item","splice","itemIndex","handleDragEnd","removeEventListener","getStyles","className","map","grp","grpI","key","onDragEnter","length","title","itemI","draggable","onDragStart","addEventListener","setTimeout","handleDragStart","DUMMY_DATA","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4KAiFeA,EA/EG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAAW,EACJC,mBAASD,GADL,mBACrBE,EADqB,KACfC,EADe,OAEIF,oBAAS,GAFb,mBAErBG,EAFqB,KAEXC,EAFW,KAItBC,EAAWC,mBACXC,EAAWD,mBAaXE,EAAkB,SAACC,EAAOC,GAC5BC,QAAQC,IAAI,iBACZ,IAAMC,EAAcR,EAASS,QAC1BL,EAAMM,SAAWR,EAASO,UACzBH,QAAQC,IAAI,0BACZV,GAAQ,SAAAc,GACJ,IAAIC,EAAUC,KAAKC,MAAMD,KAAKE,UAAUJ,IAGxC,OAFAC,EAAQP,EAAOW,YAAYC,KAAKC,OAAOb,EAAOc,UAAW,EAAGP,EAAQJ,EAAYQ,YAAYC,KAAKC,OAAOV,EAAYW,UAAW,GAAG,IAClInB,EAASS,QAAUJ,EACZO,OAKbQ,EAAgB,SAAhBA,IACFd,QAAQC,IAAI,mBACZL,EAASO,QAAQY,oBAAoB,UAAWD,GAChDpB,EAASS,QAAU,KACnBP,EAASO,QAAU,KACnBV,GAAY,IAGVuB,EAAY,SAACN,EAAYG,GAC3B,IAAMX,EAAcR,EAASS,QAC7B,OAAGD,EAAYQ,aAAeA,GAAcR,EAAYW,YAAcA,EAC3D,mBAEJ,YAGX,OACI,yBAAKI,UAAU,eAEP3B,EAAK4B,KAAI,SAACC,EAAKC,GACX,OACE,yBACEH,UAAU,YACVI,IAAKD,EACLE,YAAa,SAAAxB,GAAK,OAAKN,IAAa2B,EAAIR,KAAKY,OAAU1B,EAAgBC,EAAO,CAACY,WAAYU,EAAMP,UAAW,IAAM,OAElH,yBAAKI,UAAU,eAAeE,EAAIK,OAEhCL,EAAIR,KAAKO,KAAI,SAACP,EAAMc,GAAP,OACX,yBACIC,WAAS,EACTJ,YAAa,SAAAxB,GAAK,OAAIN,EAAWK,EAAgBC,EAAO,CAACY,WAAYU,EAAMP,UAAWY,IAAU,MAChGE,YAAa,SAAA7B,GAAK,OAzDtB,SAACA,EAAOC,GAC5BC,QAAQC,IAAI,oBAAqBF,GACjCL,EAASS,QAAUJ,EACnBH,EAASO,QAAUL,EAAMM,OACzBR,EAASO,QAAQyB,iBAAiB,UAAWd,GAE7Ce,YAAW,WACPpC,GAAY,KACb,GAiD2CqC,CAAgBhC,EAAO,CAACY,WAAYU,EAAMP,UAAWY,KAC3ER,UAAWzB,EAAWwB,EAAUI,EAAMK,GAAS,WAC/CJ,IAAKI,GACNd,YCjEzBoB,EAAa,CACjB,CACEP,MAAO,UACPb,KAAM,CAAC,IAAK,IAAK,MAEnB,CACEa,MAAO,UACPb,KAAM,CAAC,IAAK,OAcDqB,MAVf,WACE,OACE,yBAAKf,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAW7B,KAAM2C,OCPLE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.dd20dd21.chunk.js","sourcesContent":["import React, { useState, useRef } from 'react'\n\nconst DragADrop = ({ data }) => {\n    const [list, setList] = useState(data);\n    const [dragging, setDragging] = useState(false);\n    \n    const dragItem = useRef();\n    const dragNode = useRef();\n\n    const handleDragStart = (event, params) => {\n        console.log('drag starting ...', params);\n        dragItem.current = params;\n        dragNode.current = event.target;\n        dragNode.current.addEventListener('dragend', handleDragEnd);\n        \n        setTimeout(() => {\n            setDragging(true);            \n        }, 0);\n    }\n\n    const handleDragEnter = (event, params) => {\n        console.log('drag over ...');\n        const currentItem = dragItem.current;\n        if(event.target !== dragNode.current){\n            console.log(\"TARGET IS NOT THE SAME\");\n            setList(oldList => {\n                let newList = JSON.parse(JSON.stringify(oldList));\n                newList[params.groupIndex].item.splice(params.itemIndex, 0, newList[currentItem.groupIndex].item.splice(currentItem.itemIndex, 1)[0]);\n                dragItem.current = params;\n                return newList;\n            });\n        }\n    }\n\n    const handleDragEnd = () => {\n        console.log('Ending drag ...');\n        dragNode.current.removeEventListener('dragend', handleDragEnd);\n        dragItem.current = null;\n        dragNode.current = null;\n        setDragging(false);\n    }\n\n    const getStyles = (groupIndex, itemIndex) => {\n        const currentItem = dragItem.current;\n        if(currentItem.groupIndex === groupIndex && currentItem.itemIndex === itemIndex){\n            return 'current dnd-item';\n        }\n        return 'dnd-item';\n    }\n\n    return (\n        <div className=\"drag-a-drop\">\n            {\n                list.map((grp, grpI) => {\n                    return (\n                      <div\n                        className=\"dnd-group\"\n                        key={grpI}\n                        onDragEnter={event => (dragging && !grp.item.length) ? handleDragEnter(event, {groupIndex: grpI, itemIndex: 0}) : null}\n                        >\n                        <div className=\"group-title\">{grp.title}</div>\n                        {\n                          grp.item.map((item, itemI) => (\n                            <div\n                                draggable\n                                onDragEnter={event => dragging ? handleDragEnter(event, {groupIndex: grpI, itemIndex: itemI}) : null}\n                                onDragStart={event => handleDragStart(event, {groupIndex: grpI, itemIndex: itemI})}\n                                className={dragging ? getStyles(grpI, itemI) : \"dnd-item\"}\n                                key={itemI}>\n                              {item}\n                            </div>\n                          ))\n                        }\n                      </div>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default DragADrop\n","import React from 'react';\nimport './App.css';\nimport DragADrop from './components/DragADrop';\n\nconst DUMMY_DATA = [\n  {\n    title: 'group 1',\n    item: ['1', '2', '3']\n  },\n  {\n    title: 'group 2',\n    item: ['4', '5']\n  }\n]\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <DragADrop data={DUMMY_DATA} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}